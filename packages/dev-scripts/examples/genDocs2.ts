import * as fs from "node:fs";
import * as path from "node:path";
import {
  Files,
  Project,
  getExampleProjects,
  getProjectFiles,
  groupProjects,
} from "./util";

/*
 `genDocs` generates the nextjs example blocks for the website docs. 
 Note that these files are not checked in to the repo, so this command should always be run before running / building the site
 */

const dir = path.parse(import.meta.url.replace("file://", "")).dir;

const getLanguageFromFileName = (fileName: string) => fileName.split(".").pop();

// TODO: Can't we add the tabs and stuff in the `ExampleBlock` component itself?
const templateExample = (
  project: Project,
  files: Files,
) => `import { ExampleBlock } from "../../ExampleBlock";
import { Tabs } from "nextra/components";

<ExampleBlock name="${project.slug}">
  <Tabs items={${JSON.stringify(Object.keys(files).map((fileName) => fileName.slice(1)))}}>
    ${Object.entries(files)
      .map(
        ([filename, file]) =>
          `<Tabs.Tab>
            <div className={"max-h-96 overflow-scroll rounded-lg overscroll-contain"}>
\`\`\`${getLanguageFromFileName(filename)} 
${file.code}
\`\`\`
            </div>
          </Tabs.Tab>`,
      )
      .join("")}
  </Tabs>
</ExampleBlock>`;

const templateExamples = (
  projects: Project[],
) => `import dynamic from "next/dynamic";
  
export const examples = {
${projects
  .map(
    (p) => `  "${p.slug}": {
    // App: () => <div>hello</div>,
    App: dynamic(() => import("../../../../examples/${p.slug}/App"), {
      ssr: false,
    }),
    ExampleWithCode: dynamic(() => import("./mdx/${p.slug}.mdx"), {
      //ssr: false,
    }),
  },`,
  )
  .join("\n")}  
};`;

const templatePageForExample = (
  project: Project,
  readme: string,
) => `import { Example } from "../../../components/example";

${readme}

<Example name="${project.slug}" />`;

async function generateCodeForExample(project: Project) {
  const target = path.resolve(
    dir,
    "../../../docs/components/example/generated/mdx/" + project.slug + ".mdx",
  );

  const files = getProjectFiles(project);
  const filtered = Object.fromEntries(
    Object.entries(files).filter(([filename, file]) => !file.hidden),
  );

  console.log("generating code for example", project);
  console.log("AAAAAAAAAAAAAA:", filtered);

  const code = templateExample(project, filtered);

  fs.writeFileSync(target, code);
}

async function generatePageForExample(project: Project) {
  let groupSlug = project.config.group.toLocaleLowerCase().replace(" ", "-");
  if (groupSlug.endsWith("-examples")) {
    groupSlug = groupSlug.replace("-examples", "");
  }

  if (
    !fs.existsSync(
      path.resolve(dir, "../../../docs/pages/examples/" + groupSlug),
    )
  ) {
    fs.mkdirSync(
      path.resolve(dir, "../../../docs/pages/examples/" + groupSlug),
    );
  }

  const target = path.resolve(
    dir,
    "../../../docs/pages/examples/" + groupSlug + "/" + project.slug + ".mdx",
  );

  const files = getProjectFiles(project);

  const code = templatePageForExample(project, files["/README.md"]!.code);

  fs.writeFileSync(target, code);
}

async function generateExampleList(projects: Project[]) {
  const target = path.resolve(
    dir,
    "../../../docs/components/example/generated/exampleList.gen.ts",
  );

  const groups = groupProjects(projects);

  const items = Object.entries(groups).map(([group, projects]) => {
    return {
      text: group,
      items: projects.map((project) => {
        return {
          text: project.title,
          link: `/examples/${project.slug}`,
        };
      }),
    };
  });

  const code = `// generated by dev-scripts/examples/genDocs.ts
  export const EXAMPLES_LIST = ${JSON.stringify(items, undefined, 2)};`;

  fs.writeFileSync(target, code);
}

async function generateExampleComponents(projects: Project[]) {
  const target = path.resolve(
    dir,
    "../../../docs/components/example/generated/exampleComponents.gen.tsx",
  );

  const code = templateExamples(projects);

  fs.writeFileSync(target, code);
}

const projects = getExampleProjects(); // TODO: .filter((p) => p.config?.docs === true);

for (const project of projects) {
  // console.log(files);
  await generateCodeForExample(project);
  await generatePageForExample(project);
}

await generateExampleComponents(projects);
await generateExampleList(projects);
