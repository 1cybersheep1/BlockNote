// import logo from './logo.svg'
import { defaultSlashCommands, Editor, SlashMenuItem } from "@blocknote/core";
import "@blocknote/core/style.css";
import { BlockNoteView, useBlockNote } from "@blocknote/react";
import styles from "./App.module.css";

type WindowWithProseMirror = Window & typeof globalThis & { ProseMirror: any };

// slash commands

async function API(prompt: string) {
  await new Promise<void>((resolve) => setTimeout(resolve, 500));
  return `# title
  cool story`;
}
/**
 * This command should insert text generated by AI at the location where the slash-command was executed
 */
async function ContinueWritingCommand(editor: any) {
  // const blocks = editor.blocks as [];
  // const block = editor.cursorPosition.block;
  // const blockIndex = blocks.indexOf(block);
  // const blocksBefore = blocks.slice(0, blockIndex);
  //
  // const markdown = editor.blocksToMarkdown(blocksBefore);
  //
  // const newText = await API(
  //   `Please continue writing this text and return result in markdown: ${markdown}`
  // );
  //
  // const newBlocks = editor.markdownToBlocks(newText);
  //
  // editor.insertBlocksAfterBlock(newBlocks, block);
  /*
- plainText
- markdown
- html
- json
*/
  // cursorPosition: {
  //   block: Block,
  //   // blockContentBeforeCursor:
  //   // blockContentAfterCursor:
  // };
  // selection: {
  //   blocks: Block[],
  // }
  // const selection = editor.selection.startBlock;
  // all blocks
  // selected blocks
  // step 1: get content "above" command / cursor
  // step 2: call LLM API, returning markdown
  // step 3: add / replace text with LLM response
}

/**
 * This command should insert a summary of the text above
 */
function SummarizeTextAboveCommand() {
  // not really useful atm, too similar
}

// add a query in the document, and then execute that
function ExecuteCurrentBlockAsLLMCommand() {}

// this requires a different place to hook into the UI
function TranslateSelectedBlocks() {}

function App() {
  let editorAPI: Editor;
  const editor = useBlockNote({
    slashCommands: [
      ...defaultSlashCommands,
      new SlashMenuItem(
        "Continue writing",
        (editor, range) => {
          console.log("select");
          return true;
        },
        [],
        "AI"
      ),
    ],
    onUpdate: ({ editor }) => {
      if (!editorAPI) {
        editorAPI = new Editor(editor);
      } else {
        // console.log(editorAPI.allBlocks);
        // console.log(
        //   editorAPI.nodeFromBlockUpdate({
        //     type: "heading",
        //     props: { level: "3" },
        //     styledTextContent: [
        //       {
        //         text: "Hello ",
        //         styles: [
        //           {
        //             type: "underline",
        //             props: {},
        //           },
        //         ],
        //       },
        //       {
        //         text: "World",
        //         styles: [
        //           {
        //             type: "italic",
        //             props: {},
        //           },
        //         ],
        //       },
        //     ],
        //   })
        // );
        // editorAPI.insertBlocks(
        //   [
        //     {
        //       type: "heading",
        //       props: { level: "3" },
        //       styledTextContent: [
        //         {
        //           text: "Hello ",
        //           styles: [
        //             {
        //               type: "underline",
        //               props: {},
        //             },
        //           ],
        //         },
        //         {
        //           text: "World",
        //           styles: [
        //             {
        //               type: "italic",
        //               props: {},
        //             },
        //           ],
        //         },
        //       ],
        //     },
        //   ],
        //   editor.state.doc.firstChild!.firstChild!.attrs.id,
        //   "before"
        // );
        // editorAPI.insertBlocks([], editorAPI.cursorPosition.block, "after");
        // editorAPI.firstBlockAsMarkdown();
        editorAPI.markdownToBlocks(`
# dawdwa

## flesfj

### trjhirtjoihtrjhor

dwadwadwa

dwadwa

dwaadwdwadwa

- sdfesfes
    - grdggdrg
    - grdgrdgdrgrd
        1. wqewqewq
        2. eqwewqewq
            1. ewqewqewq
        3. ewqewqewq
- fesfesfesfes
        `);
        // console.log(editorAPI.blocksAsMarkdown);
        // const node = editor.state.doc.firstChild!.firstChild!;
        // console.log(node);
        // console.log(node!.type!.spec!.toDOM(node)!);
        // const serializer = DOMSerializer.fromSchema(editor.schema);
      }
      // console.log(editor.getJSON());
      (window as WindowWithProseMirror).ProseMirror = editor; // Give tests a way to get editor instance
    },
    editorProps: {
      attributes: {
        class: styles.editor,
        "data-test": "editor",
      },
    },
  });

  return <BlockNoteView editor={editor} />;
}

export default App;
